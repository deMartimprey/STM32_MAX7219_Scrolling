#ifndef __MATRIX_H
#define __MATRIX_H

#define PIN_MATRIX_CLK GPIO_PIN_7
#define PORT_MATRIX_CLK GPIOB
#define PIN_MATRIX_CS GPIO_PIN_8
#define PORT_MATRIX_CS GPIOB
#define PIN_MATRIX_DIN GPIO_PIN_9
#define PORT_MATRIX_DIN GPIOB

#define NB_MATRIX 4

#define STRING_DEMO "BON ANNIV ABCDEFGH"

// HOW TO USE
// init_matrix();
// max_init();
// print_four_letter((uint8_t*)"ABCD");

#include "stm32f1xx_hal.h"

extern uint8_t led;

static const uint8_t MAX7219_Dot_Matrix_font [67] [8] = {
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // ' ' 0x20
  {0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00}, // '!'
  {0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00}, // '"'
  {0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00}, // '#'
  {0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00}, // '$'
  {0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00}, // '%'
  {0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00}, // '&'
  {0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00}, // '''
  {0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00}, // '('
  {0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00}, // ')'
  {0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08}, // '*'
  {0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00}, // '+'
  {0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00}, // ','
  {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00}, // '-'
  {0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00}, // '.'
  {0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00}, // '/'
  /* {0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00}, // '0' */
{
  0b01111110,
  0b11111111,
  0b10000001,
  0b10000001,
  0b10000001,
  0b10000001,
  0b11111111,
  0b01111110
},
  /* {0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00}, // '1' */
  {

  0b00000000,
  0b00000001,
  0b00000001,
  0b11111111,
  0b11111111,
  0b01100001,
  0b00100001,
  0b00000000
  },
  {0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00}, // '2'
  {0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00}, // '3'
  {0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00}, // '4'
  {0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00}, // '5'
  {0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00}, // '6'
  {0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00}, // '7'
  {0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00}, // '8'
  {0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00}, // '9'
  {0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00}, // ':'
  {0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00}, // ';'
  {0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00}, // '<'
  {0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00}, // '='
  {0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00}, // '>'
  {0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00}, // '?'
  {0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00}, // '@'
  {0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00}, // 'A'
  {0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00}, // 'B'
  {0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00}, // 'C'
  {0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00}, // 'D'
  {0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00}, // 'E'
  {0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00}, // 'F'
  {0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00}, // 'G'
  {0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00}, // 'H'
  {0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00}, // 'I'
  {0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00}, // 'J'
  {0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00}, // 'K'
  {0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00}, // 'L'
  {0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00}, // 'M'
  {0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00}, // 'N'
  {0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00}, // 'O'
  {0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00}, // 'P'
  {0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00}, // 'Q'
  {0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00}, // 'R'
  {0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00}, // 'S'
  {0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00}, // 'T'
  {0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00}, // 'U'
  {0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00}, // 'V'
  {0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00}, // 'W'
  {0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00}, // 'X'
  {0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00}, // 'Y'
  {0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00}, // 'Z'
  {0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00}, // '['
  {0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00}, // backslash
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // ] (bright all dot)
{
  0b01111110,
  0b10000001,
  0b10000001,
  0b01111110,
  0b00000001,
  0b11111111,
  0b01000001,
  0b00100000}, // ^ 10
{
  0b00011000,
  0b00110000,
  0b01100000,
  0b11000000,
  0b11000000,
  0b01100000,
  0b00110000,
  0b00011000
}, // _ (simple arroy
{
  0b00000001,
  0b11111111,
  0b01000001,
  0b00100000,
  0b00000001,
  0b11111111,
  0b01000001,
  0b00100000}, // "`" 11
  {  0b11111110,
  0b10010001,
  0b10010001,
  0b01000010,
  0b00000001,
  0b11111111,
  0b01000001,
  0b00100000  }, // "a" 13
  {
  0b10001110,
  0b10010001,
  0b10010001,
  0b11110010,
  0b00000001,
  0b11111111,
  0b01000001,
  0b00100000} // "b" 15
};

void init_matrix();
void max_init(void);
void write_byte(uint8_t byte);
void write_max(uint8_t address, uint8_t data);
void write_x_max(uint8_t dot, uint8_t address, uint8_t data);
uint8_t write_all_dot(uint8_t dot, uint8_t address, uint8_t value);
void print_one_letter(uint8_t matrice, uint8_t letter);
void print_one_letter_lvl(uint8_t matrice, uint8_t letter);
void print_four_letter(uint8_t* letter);

void blank_all_matrice();
void blank_matrice(uint8_t matrice);

uint8_t* inverse_letter(uint8_t* res, uint8_t* letter);
uint8_t* turn_letter(uint8_t* res, uint8_t* letter);

void fill_matrix_tab(uint8_t** matrix_tab, uint8_t* string, uint8_t size);
void turn_matrix_tab(uint8_t** matrix_tab, uint8_t size);
void decal_letter_tab(uint8_t** matrix_tab, uint8_t size);
void decal_letter_tab_2(uint8_t** matrix_tab, uint8_t size);
void inverse_matrix_tab(uint8_t** matrix_tab, uint8_t size);
void print_matrix_tab(uint8_t** matrix_tab, uint8_t size);
void print_matrix_tab_first(uint8_t** matrix_tab, uint8_t size);
void decal_1_left(uint8_t* strings[8], uint8_t size);
void decal_1_right(uint8_t* strings[8], uint8_t size);
void write_x_max_all_line(uint8_t address, uint8_t data0, uint8_t data1, uint8_t data2, uint8_t data3);
void sideway_left(uint8_t* strings[8], uint8_t size);

void demo_matrix();

#endif /* __MATRIX_H */
